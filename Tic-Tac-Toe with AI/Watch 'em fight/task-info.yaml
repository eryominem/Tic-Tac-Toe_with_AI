type: edu
custom_name: stage3
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }


        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Game.java
  visible: true
  text: |
    package tictactoe;
    import java.util.Scanner;

    public class Game {
        int x = -1;
        int y = -1;


        //СОЗДАНИЕ ИГРОВОГО ПОЛЯ
        public char[][] createPlayField() {
            char[][] playField = new char[3][3];
            for (int i = 0; i < playField.length; i++) {
                for (int j = 0; j < playField[0].length; j++) {
                    playField[i][j] = '_';
                }
            }
            return playField;
        }

        //ВЫВОД ИГРОВОГО ПОЛЯ
        public static void printPlayField(char[][] playField) {
            System.out.println("---------");
            for (int i = 0; i < playField.length; i++) {
                System.out.print("| ");
                for (int j = 0; j < playField[0].length; j++) {
                    System.out.print(playField[i][j] + " ");
                }
                System.out.print("|");
                System.out.println();
            }
            System.out.println("---------");
        }

        //PLAY
        public void startGame() {
            Moves moves = new Moves();
            char[][] playField = createPlayField();
            printPlayField(playField);

            boolean flag = true;
            while (flag) {
                moves.setMove(playField);
                if (moves.gameResult(playField).equals("X wins") || moves.gameResult(playField).equals("O wins")) {
                    flag = false;
                    break;
                }

                if (moves.checkGameState(playField) == true) {
                    flag = false;
                    break;
                }

            }
            System.out.println(moves.gameResult(playField));
        }
    }
  learner_created: true
- name: src/tictactoe/Moves.java
  visible: true
  text: |
    package tictactoe;

    import java.util.Scanner;
    import java.util.Random;

    public class Moves {
        int x = -1;
        int y = -1;

        public boolean checkPosition(char[][] playField, int x, int y) {
            return playField[x-1][y-1] == '_' ? true : false;
        }
        //ПРОВЕРКА СЛЕДУЮЩЕГО ХОДА
        public char checkMove(char[][] playField) {
            char move = 'X';
            int countX = 0, countO = 0;
            for (int i = 0; i < playField.length; i++) {
                for (int j = 0; j < playField[0].length; j++) {
                    if (playField[i][j] == 'X')
                        countX++;
                    if (playField[i][j] == 'O')
                        countO++;
                }
            }
            if (countX > countO)
                move = 'O';

            return move;
        }

        public void setMove(char[][] playField) {
            if (checkMove(playField) == 'X') {
                boolean correctInput = true;
                do {
                    Scanner sc2 = new Scanner(System.in);
                    System.out.print("Enter the coordinates: ");
                    if (sc2.hasNextInt() == true) {
                        x = sc2.nextInt();
                        y = sc2.nextInt();
                        correctInput = true;

                        int marker = 0;
                        if (x > 3 || x < 1 || y > 3 || y < 1) {
                            System.out.println("Coordinates should be from 1 to 3!");
                            correctInput = false;
                            marker = 1;
                        }

                        if (marker != 1 && checkPosition(playField, x, y) != true) {
                            System.out.println("This cell is occupied! Choose another one!");
                            correctInput = false;
                        }

                    } else {
                        System.out.println("You should enter numbers!");
                        correctInput = false;
                        sc2.nextLine();

                    }
                } while (correctInput == false);
                playField[x-1][y-1] = 'X';
                Game.printPlayField(playField);

            }
            else {
                Random random = new Random();
                boolean flag2 = true;

                do {
                    x = random.nextInt(3) + 1;
                    y = random.nextInt(3) + 1;
                    if (checkPosition(playField, x, y) == true) {
                        playField[x-1][y-1] = 'O';
                        flag2 = false;
                        break;
                    }
                } while (flag2);
                System.out.println("Making move level \"easy\"");
                Game.printPlayField(playField);
            }
        }

        //ВЫЧИСЛЕНИЕ РЕЗУЛЬТАТА ИГРЫ
        public String gameResult(char[][] playField) {
            String result = "Draw";
            char[] fieldValues = new char[playField.length * playField[0].length];
            int count = 0;
            while (count < fieldValues.length) {
                for (int i = 0; i < playField.length; i++) {
                    for (int j = 0; j < playField[0].length; j++) {
                        fieldValues[count] = playField[i][j];
                        count++;
                    }
                }
            }

            int[][] pos = new int[][]{{0, 1, 2}, {3, 4, 5}, {6, 7, 8}, {0, 3, 6},
                    {1, 4, 7}, {2, 5, 8}, {0, 4, 8}, {2, 4, 6}};

            //ПОИСК ПОБЕДИТЕЛЯ
            for (int i = 0; i < pos.length; i++) {
                if ((fieldValues[pos[i][0]] == fieldValues[pos[i][1]]) && (fieldValues[pos[i][0]] == fieldValues[pos[i][2]])
                        && fieldValues[pos[i][0]] != '_') {
                    if (fieldValues[pos[i][0]] == 'X')
                        result = "X wins";
                    else
                        result = "O wins";
                    break;
                }
            }
            return result;
        }

        public boolean checkGameState(char[][] playField) {
            boolean state = true;
            for (int i = 0; i < playField.length; i++) {
                for (int j = 0; j < playField[0].length; j++) {
                    if (playField[i][j] == '_')
                        state = false;
                }
            }
            return state;
        }
    }
  learner_created: true
- name: src/tictactoe/Levels.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7436#comment
status: Solved
feedback:
  message: Congratulations!
  time: Sat, 02 Jul 2022 13:58:58 UTC
record: 3
