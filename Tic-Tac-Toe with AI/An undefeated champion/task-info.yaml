type: edu
custom_name: stage5
files:
- name: src/tictactoe/Main.java
  visible: true
  text: |
    package tictactoe;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/TicTacToeTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;

    import java.util.List;


    public class TicTacToeTest extends StageTest<String> {

        int[] easyAiMoves = new int[9];

        @DynamicTest(order = 0)
        CheckResult testBadParameters() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            output = program.execute("start easy");
            if (!output.toLowerCase().contains("bad parameters")) {
                return CheckResult.wrong("After entering start command with wrong parameters you should print 'Bad parameters!' and ask to enter a command again!");
            }

            program.execute("exit");

            if (!program.isFinished()) {
                return CheckResult.wrong("After entering 'exit' command you should stop the program!");
            }

            return CheckResult.correct();
        }


        @DynamicTest(order = 1)
        CheckResult testGridOutput() {

            TestedProgram program = new TestedProgram();

            program.start();

            String output = program.execute("start user easy");

            Grid printedGrid = Grid.fromOutput(output);
            Grid emptyGrid = Grid.fromLine("_________");

            if (!printedGrid.equals(emptyGrid)) {
                return CheckResult.wrong("After starting the program you should print an empty grid!\n" +
                    "Correct empty grid:\n" + emptyGrid);
            }

            if (!output.toLowerCase().contains("enter the coordinates:")) {
                return CheckResult.wrong("After printing an empty grid you should ask to enter cell coordinates!");
            }

            output = program.execute("2 2");

            Grid gridAfterMove = Grid.fromOutput(output);
            Grid correctGridAfterMove = Grid.fromLine("____X____");

            if (!gridAfterMove.equals(correctGridAfterMove)) {
                return CheckResult.wrong("After making the move wrong grid was printed.\n" +
                    "Your grid:\n" + gridAfterMove + "\n" +
                    "Correct grid:\n" + correctGridAfterMove);
            }

            if (!output.toLowerCase().replace("'", "\"").contains("making move level \"easy\"")) {
                return CheckResult.wrong("After entering a cell coordinates you should print:\nMaking move level \"easy\"");
            }

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            if (gridAfterAiMove.equals(gridAfterMove)) {
                return CheckResult.wrong("After AI move grid wasn't changed!");
            }

            Grid gameGrid = gridAfterAiMove;

            while (true) {
                if (gameGrid.getGameState() != GameState.NOT_FINISHED) {
                    switch (gameGrid.getGameState()) {
                        case X_WIN:
                            if (!output.contains("X wins")) {
                                return CheckResult.wrong("You should print 'X wins' if X win the game");
                            }
                            break;
                        case O_WIN:
                            if (!output.contains("O wins")) {
                                return CheckResult.wrong("You should print 'O wins' if O win the game");
                            }
                            break;
                        case DRAW:
                            if (!output.contains("Draw")) {
                                return CheckResult.wrong("You should print 'Draw' if the game ends with draw!");
                            }
                            break;
                    }
                    break;
                }
                Position nextMove = Minimax.getMove(gameGrid, CellState.X);

                Grid tempGrid = gameGrid.copy();
                tempGrid.setCell(nextMove.x, nextMove.y, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

                gameGrid = Grid.fromOutput(output);

                if (!gameGrid.equals(tempGrid)) {
                    return CheckResult.wrong("After making move (" + nextMove + ") the game grid is wrong!\n" +
                        "Your gird\n" + gameGrid + "\n" +
                        "Correct grid\n" + tempGrid);
                }

                if (gameGrid.getGameState() != GameState.NOT_FINISHED)
                    continue;

                gameGrid = Grid.fromOutput(output, 2);
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 100, order = 2)
        CheckResult checkEasyAi() {
            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gridAfterAiMove = Grid.fromOutput(output, 2);

            CellState[][] array = gridAfterAiMove.getGrid();

            for (int i = 0; i < 9; i++) {
                if (i == 4) {
                    continue;
                }
                if (array[i / 3][i % 3] == CellState.O) {
                    easyAiMoves[i]++;
                }
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 3)
        CheckResult checkRandom() {
            double averageScore = 0;

            for (int i = 0; i < easyAiMoves.length; i++) {
                averageScore += (i + 1) * easyAiMoves[i];
            }

            averageScore /= 8;

            double expectedValue = (double) (1 + 2 + 3 + 4 + 6 + 7 + 8 + 9) * 100 / 8 / 8;

            if (Math.abs(averageScore - expectedValue) > 20) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }

            return CheckResult.correct();
        }

        boolean isEasyNotMovingLikeMedium = false;

        @DynamicTest(repeat = 30, order = 4)
        CheckResult checkEasyNotMovingLikeMedium() {

            if (isEasyNotMovingLikeMedium) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user easy");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    isEasyNotMovingLikeMedium = true;
                }
            }

            program.stop();
            return CheckResult.correct();
        }

        @DynamicTest(order = 5)
        CheckResult checkEasyNotMovingLikeMediumAfter() {
            if (!isEasyNotMovingLikeMedium) {
                return CheckResult.wrong("Looks like your Easy level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 6)
        CheckResult checkEasyVsEasy() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start easy easy");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 10, order = 7)
        CheckResult checkMediumAi() {
            TestedProgram program = new TestedProgram();
            program.start();
            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid gameGrid = Grid.fromOutput(output, 2);

            CellState[][] cellStates = gameGrid.getGrid();

            if (cellStates[0][0] == CellState.EMPTY && cellStates[2][2] == CellState.EMPTY) {
                output = program.execute("1 1");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][2] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            } else {
                output = program.execute("1 3");
                gameGrid = Grid.fromOutput(output, 2);
                if (gameGrid.getGrid()[2][0] == CellState.EMPTY) {
                    return CheckResult.wrong("Looks like your Medium level AI doesn't make a correct move!");
                }
            }
            program.stop();

            return CheckResult.correct();
        }

        @DynamicTest(order = 8, repeat = 5)
        CheckResult checkMediumVsMedium() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start medium medium");

            List<Grid> gridList = Grid.allGridsFromOutput(output);

            Grid.checkGridSequence(gridList);

            return CheckResult.correct();
        }

        boolean isMediumNotMovingLikeHard = false;

        @DynamicTest(repeat = 30, order = 9)
        CheckResult checkMediumNotMovingLikeHard() {

            if (isMediumNotMovingLikeHard) {
                return CheckResult.correct();
            }

            TestedProgram program = new TestedProgram();
            program.start();

            program.execute("start user medium");

            String output = program.execute("2 2");

            Grid userMoveGrid = Grid.fromOutput(output, 1);
            Grid mediumMoveGrid = Grid.fromOutput(output, 2);

            Position mediumMove = Grid.getMove(userMoveGrid, mediumMoveGrid);

            List<Position> minimaxCorrectPositions = Minimax.getAvailablePositions(userMoveGrid, CellState.O);

            if (!minimaxCorrectPositions.contains(mediumMove)) {
                isMediumNotMovingLikeHard = true;
            }

            return CheckResult.correct();
        }

        @DynamicTest(order = 10)
        CheckResult checkMediumNotMovingLikeHardAfter() {
            if (!isMediumNotMovingLikeHard) {
                return CheckResult.wrong("Looks like Medium level AI doesn't make a random move!");
            }
            return CheckResult.correct();
        }

        @DynamicTest(order = 11)
        CheckResult checkHardAi() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start user hard");
            Grid grid = Grid.fromOutput(output);
            Position nextMove = Minimax.getMove(grid, CellState.X);
            output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));

            while (!output.toLowerCase().contains("win") && !output.toLowerCase().contains("draw")) {
                Grid gridAfterUserMove = Grid.fromOutput(output);
                Grid gridAfterAiMove = Grid.fromOutput(output, 2);
                Position aiMove = Grid.getMove(gridAfterUserMove, gridAfterAiMove);

                List<Position> correctMinimaxMovePositions = Minimax.getAvailablePositions(gridAfterUserMove, CellState.O);
                if (!correctMinimaxMovePositions.contains(aiMove)) {
                    return CheckResult.wrong("Your minimax algorithm is wrong! It chooses wrong positions to make a move!");
                }

                nextMove = Minimax.getMove(gridAfterAiMove, CellState.X);

                output = program.execute((nextMove.x + 1) + " " + (nextMove.y + 1));
            }

            return CheckResult.correct();
        }

        @DynamicTest(repeat = 5, order = 12)
        CheckResult checkHardVsHard() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("start hard hard");

            if (!output.toLowerCase().contains("draw")) {
                return CheckResult.wrong("The result of the game between minimax algorithms should be always 'Draw'!\n" +
                    "Make sure your output contains 'Draw'.");
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
- name: src/tictactoe/Field.java
  visible: true
  text: |-
    package tictactoe;

    public class Field {

        static final int SIZE = 3;
        static char[][] field = new char[SIZE][SIZE];
        static final char CROSS = 'X';
        static final char ZERO = 'O';
        static final char EMPTY = ' ';
        static char currentPlayer = CROSS;
        static char nextPlayer = ZERO;
        static boolean isEndOfGame = false;

        public static void createField() {
            for (int i = 0; i < SIZE; i++) {
                for (int j = 0; j < SIZE; j++) {
                    field[i][j] = EMPTY;
                }
            }
        }

        public static void printField() {
            System.out.println("---------");
            for (int i = 0; i < SIZE; i++) {
                System.out.print("|");
                for (int j = 0; j < SIZE; j++) {
                    System.out.printf("%2c", field[i][j]);
                }
                System.out.print(" |");
                System.out.println();
            }
            System.out.println("---------");
        }

        public static boolean isCellOccupied(String coordinates) {
            int x = Character.getNumericValue(coordinates.charAt(0)) - 1;
            int y = Character.getNumericValue(coordinates.charAt(2)) - 1;
            if (field[x][y] != EMPTY) {
                System.out.println("This cell is occupied! Choose another one!");
                return true;
            }
            return false;
        }

        public static boolean isEndOfGame() {
            int count;
            for (int i = 0; i < SIZE; i++) {
                count = 0;
                for (int j = 0; j < SIZE; j++) {
                    if (field[i][j] == currentPlayer) {
                        count++;
                        if (count == SIZE) {
                            System.out.println(currentPlayer + " wins");
                            return true;
                        }
                    }
                }
            }
            for (int i = 0; i < SIZE; i++) {
                count = 0;
                for (int j = 0; j < SIZE; j++) {
                    if (field[j][i] == currentPlayer) {
                        count++;
                        if (count == SIZE) {
                            System.out.println(currentPlayer + " wins");
                            return true;
                        }
                    }
                }
            }
            count = 0;
            for (int i = 0; i < SIZE; i++) {
                if (field[i][i] == currentPlayer) {
                    count++;
                    if (count == SIZE) {
                        System.out.println(currentPlayer + " wins");
                        return true;
                    }
                }
            }
            count = 0;
            for (int i = 0; i < SIZE; i++) {
                if (field[i][SIZE - 1 - i] == currentPlayer) {
                    count++;
                    if (count == SIZE) {
                        System.out.println(currentPlayer + " wins");
                        return true;
                    }
                }
            }
            for (int i = 0; i < SIZE; i++) {
                for (int j = 0; j < SIZE; j++) {
                    if (field[i][j] == EMPTY) return false;
                }
            }
            System.out.println("Draw");
            return true;
        }
    }
  learner_created: true
- name: src/tictactoe/Human.java
  visible: true
  text: |-
    package tictactoe;

    public class Human extends Player {

        private final String name = "user";

        @Override
        public String getName() {
            //return super.getName();
            return name;
        }

        @Override
        public void turn() {
            String coordinates;
            do {
                coordinates = Input.coordinatesInput();
            } while (Field.isCellOccupied(coordinates));
            int x = Character.getNumericValue(coordinates.charAt(0)) - 1;
            int y = Character.getNumericValue(coordinates.charAt(2)) - 1;
            Field.field[x][y] = Field.currentPlayer;
            Field.printField();
            Field.isEndOfGame = Field.isEndOfGame();
            turnSwitch();
        }
    }
  learner_created: true
- name: src/tictactoe/EasyAI.java
  visible: true
  text: |-
    package tictactoe;

    import java.util.Random;

    public class EasyAI extends Player {

        private final String name = "easy";

        @Override
        public String getName() {
            return name;
        }

        @Override
        public void turn() {
            Random random = new Random();
            int x;
            int y;
            do {
                x = random.nextInt(3);
                y = random.nextInt(3);
            } while (Field.field[x][y] != Field.EMPTY);
            System.out.println("Making move level \"easy\"");
            Field.field[x][y] = Field.currentPlayer;
            Field.printField();
            Field.isEndOfGame = Field.isEndOfGame();
            turnSwitch();
        }
    }
  learner_created: true
- name: src/tictactoe/Player.java
  visible: true
  text: |-
    package tictactoe;

    public abstract class Player {

        private String name;

        public String getName() {
            return name;
        }

        static Player[] possiblePlayers = {
                new Human(),
                new EasyAI(),
                new MediumAI(),
                new HardAI()
        };
        public abstract void turn();

        public void turnSwitch() {
            if (Field.currentPlayer == Field.CROSS) {
                Field.currentPlayer = Field.ZERO;
                Field.nextPlayer = Field.CROSS;
            } else {
                Field.currentPlayer = Field.CROSS;
                Field.nextPlayer = Field.ZERO;
            }
        }

        public static Player[] playersChoose() {
            Player[] actualPlayers = new Player[2];
            String[] input = Input.gameModeInput();
            if ("exit".equals(input[0])) {
                System.exit(0);
            }
            for (Player player : possiblePlayers) {
                if (input[1].equals(player.getName())) actualPlayers[0] = player;
                if (input[2].equals(player.getName())) actualPlayers[1] = player;
            }
            return actualPlayers;
        }
    }
  learner_created: true
- name: src/tictactoe/MediumAI.java
  visible: true
  text: |-
    package tictactoe;

    import java.util.Random;

    public class MediumAI extends Player {

        private final String name = "medium";
        private int[] coordinates = new int[2];
        boolean isCanWin;
        boolean isRivalCanWin;

        @Override
        public String getName() {
            return name;
        }

        public void turn() {
            int x;
            int y;
            checkWin();
            x = coordinates[0];
            y = coordinates[1];
            System.out.println("Making move level \"medium\"");
            Field.field[x][y] = Field.currentPlayer;
            Field.printField();
            Field.isEndOfGame = Field.isEndOfGame();
            turnSwitch();
        }

        public void checkWin() {
            Random random = new Random();
            char[] players = new char[]{Field.currentPlayer, Field.nextPlayer};
            int count;
            boolean isAnyCellEmpty;
            for (char player : players) {
                for (int i = 0; i < Field.SIZE; i++) {
                    count = 0;
                    isAnyCellEmpty = false;
                    for (int j = 0; j < Field.SIZE; j++) {
                        if (Field.field[i][j] == Field.EMPTY) {
                            coordinates[0] = i;
                            coordinates[1] = j;
                            isAnyCellEmpty = true;
                        }
                        if (Field.field[i][j] == player) count++;
                    }
                    if (count == Field.SIZE - 1 && isAnyCellEmpty) {
                        return;
                    }
                }
                for (int i = 0; i < Field.SIZE; i++) {
                    count = 0;
                    isAnyCellEmpty = false;
                    for (int j = 0; j < Field.SIZE; j++) {
                        if (Field.field[j][i] == Field.EMPTY) {
                            coordinates[0] = j;
                            coordinates[1] = i;
                            isAnyCellEmpty = true;
                        }
                        if (Field.field[j][i] == player) count++;
                    }
                    if (count == Field.SIZE - 1 && isAnyCellEmpty) {
                        return;
                    }
                }
                count = 0;
                isAnyCellEmpty = false;
                for (int i = 0; i < Field.SIZE; i++) {
                    if (Field.field[i][i] == Field.EMPTY) {
                        coordinates[0] = i;
                        coordinates[1] = i;
                        isAnyCellEmpty = true;
                    }
                    if (Field.field[i][i] == player) count++;
                }
                if (count == Field.SIZE - 1 && isAnyCellEmpty) {
                    return;
                }
                count = 0;
                isAnyCellEmpty = false;
                for (int i = 0; i < Field.SIZE; i++) {
                    if (Field.field[i][Field.SIZE - 1 - i] == Field.EMPTY) {
                        coordinates[0] = i;
                        coordinates[1] = Field.SIZE - 1 - i;
                        isAnyCellEmpty = true;
                    }
                    if (Field.field[i][Field.SIZE - 1 - i] == player) count++;
                }
                if (count == Field.SIZE - 1 && isAnyCellEmpty) {
                    return;
                }
            }
            do {
                coordinates[0] = random.nextInt(3);
                coordinates[1] = random.nextInt(3);
            } while (Field.field[coordinates[0]][coordinates[1]] != Field.EMPTY);
        }
    }
  learner_created: true
- name: src/tictactoe/HardAI.java
  visible: true
  text: |-
    package tictactoe;

    public class HardAI extends Player {

        private final String name = "hard";

        @Override
        public String getName() {
            return name;
        }

        @Override
        public void turn() {

        }
    }
  learner_created: true
- name: src/tictactoe/Input.java
  visible: true
  text: |-
    package tictactoe;

    import java.util.Scanner;

    public class Input {

        public static String coordinatesInput() {
            Scanner sc = new Scanner(System.in);
            String coordinates;
            do {
                System.out.println("Enter the coordinates:");
                coordinates = sc.nextLine();
            } while (isCoordinatesIncorrect(coordinates));
            return coordinates;
        }

        public static boolean isCoordinatesIncorrect(String coordinates) {
            if (coordinates.length() != 3 || coordinates.charAt(1) != ' ') {
                System.out.println("Incorrect input, try again!");
                return true;
            } else if (!Character.toString(coordinates.charAt(0)).matches("\\d")
                    || !Character.toString(coordinates.charAt(2)).matches("\\d")) {
                System.out.println("You should enter numbers!");
                return true;
            } else if (!Character.toString(coordinates.charAt(0)).matches("[1-3]")
                    || !Character.toString(coordinates.charAt(2)).matches("[1-3]")) {
                System.out.println("Coordinates should be from 1 to 3!");
                return true;
            }
            return false;
        }

        public static String[] gameModeInput() {
            Scanner sc = new Scanner(System.in);
            String[] input;
            while (true) {
                System.out.print("Input command: ");
                input = sc.nextLine().split(" ");
                if ("exit".equals(input[0])) {
                    break;
                }
                if (input.length == 3) {
                    if (!"start".equals(input[0])) {
                        System.out.println("Bad parameters!");
                        continue;
                    }
                    if (!"user".equals(input[1]) && !"easy".equals(input[1]) && !"medium".equals(input[1]) && !"hard".equals(input[1])) {
                        System.out.println("Bad parameters!");
                        continue;
                    }
                    if (!"user".equals(input[2]) && !"easy".equals(input[2]) && !"medium".equals(input[2]) && !"hard".equals(input[2])) {
                        System.out.println("Bad parameters!");
                    } else {
                        break;
                    }
                } else {
                    System.out.println("Bad parameters!");
                }
            }
            return input;
        }
    }
  learner_created: true
- name: src/tictactoe/Move.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/7438#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Wed, 06 Jul 2022 19:09:19 UTC
record: -1
